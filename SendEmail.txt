// --------------------------------------------------------------------------------------------------
// [01]
// SendEmail.h
#include<windows.h>
#include<stdio.h>
#include<WinSock.h>
#include<iostream>
using namespace std;
#pragma comment(lib,"ws2_32.lib")

struct Base64Date6
{
	unsigned int d4:6;
	unsigned int d3:6;
	unsigned int d2:6;
	unsigned int d1:6;
};

#include <afxtempl.h>

#define CASTR CArray<CString,CString&>

#ifndef ENUM_PARAM_TYPE_DEFINED
#define ENUM_PARAM_TYPE_DEFINED
typedef enum _ENUM_PARAM_TYPE{
	ept_inner=0,
	ept_file,
	ept_input
}ENUM_PARAM_TYPE;
#endif //!ENUM_PARAM_TYPE_DEFINED

class CSendEmail  
{
public:

	CSendEmail();
	CSendEmail(CRichEditCtrl* pRich);
	CSendEmail(CRichEditCtrl* pRich,ENUM_PARAM_TYPE ept);
	virtual ~CSendEmail();

	CASTR castr;
	ENUM_PARAM_TYPE m_ept;
	BOOL GetMailContentArray(CRichEditCtrl* pr);

	// 协议中加密部分使用的是base64方法
	TCHAR ConvertToBase64(TCHAR c6);
	void EncodeBase64(TCHAR *dbuf,TCHAR *buf128,int len);
	void SendMail(ENUM_PARAM_TYPE ept,TCHAR *body);
	int OpenSocket(struct sockaddr *addr);
	int MySendEmail(TCHAR *pSendAdd=NULL,TCHAR *pReceiveAdd=NULL,CString strSegment=_T(""));

};
// --------------------------------------------------------------------------------------------------
// [02] SendEmail.cpp


CSendEmail::CSendEmail()
{

}

CSendEmail::CSendEmail(CRichEditCtrl* pRich)
{
	m_ept=ept_inner;
	GetMailContentArray(pRich);
}

CSendEmail::CSendEmail(CRichEditCtrl* pRich,ENUM_PARAM_TYPE ept)
{
	m_ept=ept;
	//DISP(ept);
	GetMailContentArray(pRich);
}

CSendEmail::~CSendEmail()
{

}

TCHAR CSendEmail::ConvertToBase64(TCHAR uc)
{
	if(uc<26){  return _T('A')+uc; }
	if(uc<52){  return _T('a')+(uc-26); }
	if(uc<62){ 	return _T('0')+(uc-52); }
	if(uc==62){ return _T('+'); }
				return _T('/');
}

// base64的实现
void CSendEmail::EncodeBase64(TCHAR *dbuf,TCHAR *buf128,int len)
{
	struct Base64Date6 *pddd=NULL;
	int i=0;
	TCHAR buf[256]={0};
	TCHAR *tmp=NULL;
	TCHAR cc=_T('\0');

	memset(buf,0,256);
	//strcpy(buf,buf128);
	_tcscpy(buf,buf128);
	for(i=1;i<=len/3;i++){
		tmp=buf+(i-1)*3;
		cc=tmp[2];
		tmp[2]=tmp[0];
		tmp[0]=cc;
		pddd=(struct Base64Date6*)tmp;
		dbuf[(i-1)*4+0]=ConvertToBase64((unsigned int)pddd->d1);
		dbuf[(i-1)*4+1]=ConvertToBase64((unsigned int)pddd->d2);
		dbuf[(i-1)*4+2]=ConvertToBase64((unsigned int)pddd->d3);
		dbuf[(i-1)*4+3]=ConvertToBase64((unsigned int)pddd->d4);
	}
	if(len%3==1){
		tmp=buf+(i-1)*3;
		cc=tmp[2];
		tmp[2]=tmp[0];
		tmp[0]=cc;
		pddd=(struct Base64Date6*)tmp;
		dbuf[(i-1)*4+0]=ConvertToBase64((unsigned int)pddd->d1);
		dbuf[(i-1)*4+1]=ConvertToBase64((unsigned int)pddd->d2);
		dbuf[(i-1)*4+2]='=';
		dbuf[(i-1)*4+3]='=';
	}
	if(len%3==2){
		tmp=buf+(i-1)*3;
		cc=tmp[2];
		tmp[2]=tmp[0];
		tmp[0]=cc;
		pddd =(struct Base64Date6*)tmp;
		dbuf[(i-1)*4+0]=ConvertToBase64((unsigned int)pddd->d1);
		dbuf[(i-1)*4+1]=ConvertToBase64((unsigned int)pddd->d2);
		dbuf[(i-1)*4+2]=ConvertToBase64((unsigned int)pddd->d3);
		dbuf[(i-1)*4+3]='=';
	}
	return;
}

// 发送邮件
void CSendEmail::SendMail(ENUM_PARAM_TYPE ept,TCHAR *body)
{
	int sockfd={0};
	TCHAR 
		buf[CONTENT_SIZE]={0}, // CONTENT_SIZE 128
		rbuf[CONTENT_SIZE]={0},
		login[COUNT_SIZE]={0},
		pass[COUNT_SIZE]={0};

	WSADATA WSAData;
	struct sockaddr_in their_addr={0};
	WSAStartup(MAKEWORD(2,2),&WSAData);
	memset(&their_addr,0,sizeof(their_addr));

	their_addr.sin_family=AF_INET; //而DOS,Windows中仅支持AF_INET，它是网际网区域
	their_addr.sin_port=htons(25); //u_short PASCAL FAR htons (u_short hostshort);
	hostent *hptr=gethostbyname(_G(PD->m_SEP[ept].strSmtpAddr)); //SMTP_ADDR); //220.181.12.11 网易163免费邮箱相关服务器信息：接收邮件服务器为 pop.163.com，发送邮件服务器(SMTP)为smtp.163.com。
	memcpy(&their_addr.sin_addr.S_un.S_addr,hptr->h_addr_list[0],hptr->h_length);

	CString s;
	s.Format(_T("IP of %s is : %d:%d:%d:%d\n"),
		_G(PD->m_SEP[ept].strSmtpAddr),
		their_addr.sin_addr.S_un.S_un_b.s_b1,
		their_addr.sin_addr.S_un.S_un_b.s_b2,
		their_addr.sin_addr.S_un.S_un_b.s_b3,
		their_addr.sin_addr.S_un.S_un_b.s_b4);

	//o<<"%%%%=">>s;

	// 连接邮件服务器，如果连接后没有响应，则2 秒后重新连接
	// 重复10次不成功，则退出发邮件程序
	int nRepeat=0;
	sockfd=OpenSocket((struct sockaddr *)&their_addr);
	memset(rbuf,0,CONTENT_SIZE);
	while(recv(sockfd,rbuf,CONTENT_SIZE,0)==0){
		//cout<<"reconnect..."<<endl;
		//o<<"reconnect...";
		if(++nRepeat>10){
			AfxMessageBox(_T("连接邮件服务器失败，请检查网络连接是否正常"));
			return;
		}
		Sleep(2);
		sockfd=OpenSocket((struct sockaddr *)&their_addr);
		memset(rbuf,0,CONTENT_SIZE);
	}

	//cout<<rbuf<<endl;
	//o<<rbuf;

	// EHLO
	memset(buf,0,CONTENT_SIZE);
	_tcscpy(buf,"EHLO HYL-PC\r\n"); //o<<"buf=">>buf;
	send(sockfd,buf,strlen(buf),0);
	memset(rbuf,0,CONTENT_SIZE);
	recv(sockfd,rbuf,CONTENT_SIZE,0);
	//cout<<"EHLO REceive: "<<rbuf<<endl;
	//o<<"EHLO REceive: ">>rbuf;

	// AUTH LOGIN
	memset(buf,0,1500);
	_tcscpy(buf,"AUTH LOGIN\r\n"); //o<<"buf=">>buf;
	send(sockfd,buf,strlen(buf),0);
	memset(rbuf,0,CONTENT_SIZE);
	recv(sockfd,rbuf,CONTENT_SIZE,0);
	//cout<<"Auth Login Receive: "<<rbuf<<endl;
	//o<<"Auth Login Receive: ">>rbuf;

	// USER
	memset(buf,0,CONTENT_SIZE);
	sprintf(buf,_G(PD->m_SEP[ept].strAccountSend)); //"15868955658@163.com");//你的邮箱账号
	memset(login,0,COUNT_SIZE);
	EncodeBase64(login,buf,strlen(buf));
	sprintf(buf,"%s\r\n",login);
	send(sockfd,buf,strlen(buf),0);
	//cout<<"Base64 UserName: "<<buf<<endl;
	memset(rbuf,0,CONTENT_SIZE);
	recv(sockfd,rbuf,CONTENT_SIZE,0);
	//cout<<"User Login Receive: "<<rbuf<<endl;
	//o<<"User Login Receive: ">>rbuf;

	// PASSWORD
	sprintf(buf,_G(PD->m_SEP[ept].strAuthorizedCode)); //EMAIL_PASSWORD);//你的邮箱授权密码
	memset(pass,0,COUNT_SIZE);
	EncodeBase64(pass,buf,strlen(buf));
	sprintf(buf,"%s\r\n",pass);
	send(sockfd,buf,strlen(buf),0);
	//cout<<"Base64 Password: "<<buf<<endl;
	//o<<"Base64 Password: ">>buf;

	memset(rbuf,0,CONTENT_SIZE);
	recv(sockfd,rbuf,CONTENT_SIZE,0);
	//cout<<"Send Password Receive: "<<rbuf<<endl;
	//o<<"Send Password Receive: ">>rbuf;

	// MAIL FROM
	memset(buf,0,CONTENT_SIZE);
	sprintf(buf,_T("MAIL FROM: <%s>\r\n"),_G(PD->m_SEP[ept].strAccountSend)); //RECEPT_COUNT);
	send(sockfd,buf,strlen(buf),0);
	memset(rbuf,0,CONTENT_SIZE);
	recv(sockfd,rbuf,CONTENT_SIZE,0);
	//cout<<"set Mail From Receive: "<<rbuf<<endl;
	//o<<"set Mail From Receive: ">>rbuf;

	// RCPT TO 第一个收件人
	sprintf(buf,_T("RCPT TO:<%s>\r\n"),_G(PD->m_SEP[ept].strAccountRecept)); //email); // email
	send(sockfd,buf,strlen(buf),0);
	memset(rbuf,0,CONTENT_SIZE);
	recv(sockfd,rbuf,CONTENT_SIZE,0);
	//cout<<"Tell Sendto Receive: "<<rbuf<<endl;
	//o<<"Tell Sendto Receive: ">>rbuf;

	// DATA 准备开始发送邮件内容
	_tcscpy(buf,_T("DATA\r\n"));
	send(sockfd,buf,strlen(buf),0);
	memset(rbuf,0,CONTENT_SIZE);
	recv(sockfd,rbuf,CONTENT_SIZE,0);
	//cout<<"Send Mail Prepare Receive: "<<rbuf<<endl;
	//o<<"Send Mail Prepare Receive: ">>rbuf;

	// 发送邮件内容，\r\n.\r\n内容结束标记
	sprintf(buf,_T("%s\r\n.\r\n"),body);
	send(sockfd,buf,strlen(buf),0);
	memset(rbuf,0,CONTENT_SIZE);
	recv(sockfd,rbuf,CONTENT_SIZE,0);
	//cout<<"Send Mail Receive: "<<rbuf<<endl;
	//o<<"Send Mail Receive: ">>rbuf;

	// QUIT
	_tcscpy(buf,_T("QUIT\r\n"));
	send(sockfd,buf,strlen(buf),0);
	memset(rbuf,0,CONTENT_SIZE);
	recv(sockfd,rbuf,CONTENT_SIZE,0);
	//cout<<"Quit Receive: "<<rbuf<<endl;
	//o<<"Quit Receive: ">>rbuf;

	//清理工作
	closesocket(sockfd);
	WSACleanup();
	return;
}

// 打开TCP Socket连接
int CSendEmail::OpenSocket(struct sockaddr *addr)
{
	int sockfd=0;
	sockfd=socket(PF_INET,SOCK_STREAM,0);
	if(sockfd<0){
		//cout<<"Open sockfd(TCP) error!"<<endl;
		o<<"Open sockfd(TCP) error!";
		exit(-1);
	}
	if(connect(sockfd,addr,sizeof(struct sockaddr))<0){
		//cout<<"Connect sockfd(TCP) error!"<<endl;
		o<<"Connect sockfd(TCP) error!";
		exit(-1);
	}
	return sockfd;
}


// 1565676213
int CSendEmail::MySendEmail(TCHAR *pSendAdd, TCHAR *pReceiveAdd, CString strSegment)
{
	//TCHAR EmailTo[]="676255267@qq.com";
	//TCHAR EmailTo[]="838410534@qq.com";

	TCHAR EmailContents[SIZE_EMAIL+1]={0};
	CString strLast;
	//int index=pcastr->GetSize()+1;
	//int id=index;
	//while(--id>=0){
		//strLast=pcastr->GetAt(id);
		//TCHAR EmailTo[]=_G(PD->m_SEP[m_ept].strAccountRecept); //SEND_ACCOUNT; //"15868955658@163.com";
		strLast.Format(_T("\
		From: \"发自\"<%s>\r\n\
		To: \"发到\"<%s>\r\n\
		Subject: PickClipboard\r\n\r\n%s\r\n"),
		_G(PD->m_SEP[m_ept].strAccountSend), // SEND_ACCOUNT, 
		_G(PD->m_SEP[m_ept].strAccountRecept), // RECEPT_ACCOUNT,
		_G(strSegment));
		/*
		strLast.Format(_T("\
		From: \"%s\"<%s>\r\n\
		To: \"%s\"<%s>\r\n\
		Subject: PickClipboard\r\n\r\n%s\r\n"),
		EMAIL_NAME,SEND_ACCOUNT, 
		EMAIL_NAME,RECEPT_ACCOUNT,
		_G(strSegment));
		*/
		/*int size=str.GetLength(); //o<<"size=">>size;
		CString strLast;
		if(size>=CONTENT_SIZE){
			strLast=str.Mid(0,size);
		}
		else{
			strLast=str;
		}*/

		_tcscpy(EmailContents,_G(strLast));

		//o<<"EmailContents=">>strLast;

		SendMail(m_ept,EmailContents);
		strLast=_T("");
	//}
	return 0;

}

// 对下框内容进行分行累加，
// 上限为 640个汉字
//#define SIZE_EMAIL 1024

BOOL CSendEmail::GetMailContentArray(CRichEditCtrl *pr)
{
	TCHAR tchar[SIZE_EMAIL+1]={0};
	int lenCur, // 当前串长
		lenHistory=0, // 历史串长
		size=pr->GetTextLength(); // 框内字符串长

	CString strHistory=_T(""), // 历史串
		strCur; // 当前串
	int i=-1,
		countLine=pr->GetLineCount(); // 行数，分行取，不会把汉字中开

	CHARRANGE cr;
	TCHAR *pcb=NULL, // '1' 和 '0' 后者作为新串起点，会把汉字中开
		*pch=NULL; // 一行字符串

	while(++i<countLine){
		cr.cpMin=pr->LineIndex(i);
		cr.cpMax=((i+1)==countLine)?size:pr->LineIndex(i+1);
		pr->SetSel(cr); // 选上一行

		lenCur=cr.cpMax-cr.cpMin; // 当行长
		lenHistory=strHistory.GetLength(); // 历行长
		strCur=pr->GetSelText();  //o<<"strCur=">>strCur;// 当前行串

REPEAT:
		if(lenCur<SIZE_EMAIL_REST){ // 一行长度小于上限
			// 不必分段
			if(lenCur+lenHistory<SIZE_EMAIL_REST){ // 可以追加
				strHistory+=strCur;
			}
			else{ // 不得追加
				// 历史串发邮件
				MySendEmail(NULL,NULL,strHistory);
				// 更新历史串
				strHistory=strCur;
			}
		}
		else{ // 一行长度大于上限

			int diff=SIZE_EMAIL_REST-lenHistory;
			// 需要分段
			int arrlen=strCur.GetLength();
			pcb=new TCHAR[lenCur+1];
			pch=new TCHAR[lenCur+1];
			_tcscpy(pch,_G(strCur));

			TCHAR* q=pcb; --q;
			TCHAR* p=pch; --p;
			TCHAR c=*(++p);
			while(c){
				*(++q)=(c>0)?_T('1'):_T('0'); // 该起始位置若为 '0' 汉字会中开
				c=*(++p);
			}
			// 先补足上一段
			BOOL b=(pcb[diff]>0); // 处于解理面
			if(!b){
				diff--;
			}
			CString s=strCur.Mid(0,diff);
			strHistory+=s;
			// 历史串发邮件
			MySendEmail(NULL,NULL,strHistory);

			strHistory=_T("");
			strCur=s.Mid(diff);
			DEL(pcb);
			DEL(pch);
			goto REPEAT;

		}
	}
	MySendEmail(NULL,NULL,strHistory);
	strHistory=_T("");

	return TRUE;
}

#undef EMAIL
#undef EMAIL_PASSWORD
#undef SMTP_ADDR 
#undef RECEPT_ACCOUNT
//#undef SEND_ACCOUNT
//#undef COUNT_SIZE
//#undef CONTENT_SIZE
